//12.rr
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

typedef struct
{
      int pid; // Process ID
     int burst_time;
     int arrival_time;
     int priority;       // For priority scheduling
     int remaining_time; // For Preemptive scheduling
     int finish_time;
     int turnaround_time;
     int waiting_time;
 } Process;

 typedef struct QueueNode
 {
     int process_index;
     struct QueueNode *next;
 } QueueNode;

 typedef struct
 {
     QueueNode *front, *rear;
 } Queue;

 // Queue operations
 void enqueue(Queue *q, int index)
 {
     QueueNode *newNode = (QueueNode *)malloc(sizeof(QueueNode));
     newNode->process_index = index;
     newNode->next = NULL;
     if (q->rear == NULL)
     {
         q->front = q->rear = newNode;
         return;
     }
     q->rear->next = newNode;
     q->rear = newNode;
 }

 int dequeue(Queue *q)
 {
     if (q->front == NULL)
         return -1;
     int index = q->front->process_index;
     QueueNode *temp = q->front;
     q->front = q->front->next;
     if (q->front == NULL)
         q->rear = NULL;
     free(temp);
     return index;
 }
 bool is_empty(Queue *q)
 {
     return q->front == NULL;
 }

 void calculate_times(Process p[], int n)
 {
     for (int i = 0; i < n; i++)
     {
         p[i].turnaround_time = p[i].finish_time - p[i].arrival_time;
         p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;
     }
 }
 void round_robin(Process p[], int n, int quantum)
 {
     printf("\nRound Robin (using Queue):\n");
     printf("Scheduling Sequence: ");
     Queue q = {NULL, NULL};
     int time = 0, completed = 0;

     // Initialize the remaining times and enqueue processes that have arrived
     for (int i = 0; i < n; i++)
         p[i].remaining_time = p[i].burst_time;
     int process_in_queue[n];
     for (int i = 0; i < n; i++)
         process_in_queue[i] = 0; // Keeps track if the process is already in the queue
     // Enqueue processes that have arrived at the start (time = 0)
     for (int i = 0; i < n; i++)
     {
         if (p[i].arrival_time <= time && !process_in_queue[i])
         {
             enqueue(&q, i);
             process_in_queue[i] = 1;
         }
     }
     while (completed != n)
     {
         int idx = dequeue(&q);
         // If queue is empty, move time to the arrival of the next process
         if (idx == -1)
         {
             time++;
             for (int i = 0; i < n; i++)
             {
                 if (p[i].arrival_time <= time && !process_in_queue[i])
                {
                     enqueue(&q, i);
                     process_in_queue[i] = 1;
                 }
             }
             continue;
         }

         // Execute the process in the queue
         printf("P%d ", p[idx].pid);
         if (p[idx].remaining_time > quantum)
         {
             time += quantum;
             p[idx].remaining_time -= quantum;
         }
         else
         {
             time += p[idx].remaining_time;
             p[idx].remaining_time = 0;
             p[idx].finish_time = time;
             completed++;
         }
         // Check for new arrivals and enqueue them
         for (int i = 0; i < n; i++)
         {
             if (p[i].arrival_time <= time && !process_in_queue[i])
             {
                 enqueue(&q, i);
                 process_in_queue[i] = 1;
             }
         }
         // Re-enqueue the current process if it's not yet finished
         if (p[idx].remaining_time > 0)
         {
             enqueue(&q, idx);
         }
     }
     printf("\n");
     calculate_times(p, n);
 }

 void print_times(Process p[], int n)
 {
     printf("PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n");
     for (int i = 0; i < n; i++)
     {
         printf("%d\t%d\t%d\t%d\t%d\t\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].finish_time, p[i].turnaround_time, p[i].waiting_time);
     }
 }
 int main()
 {
     int n = 4;
     Process p[] = {
         {1, 6, 0, 1, 0, 0, 0, 0},
         {2, 8, 1, 3, 0, 0, 0, 0},
         {3, 7, 2, 2, 0, 0, 0, 0},
         {4, 3, 3, 4, 0, 0, 0, 0},
     };
     round_robin(p, n, 2); // Quantum of 2
     print_times(p, n);
     return 0;
 }
