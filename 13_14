//13.Bankers
//  Banker's Algorithm
#include <stdio.h>
int main()
{
    // P0, P1, P2, P3, P4 are the Process names here
    int n, m, i, j, k;
    n = 5;                         // Number of processes
    m = 3;                         // Number of resources
    int alloc[5][3] = {{0, 1, 0},  // P0 // Allocation Matrix
                       {2, 0, 0},  // P1
                       {3, 0, 2},  // P2
                       {2, 1, 1},  // P3
                       {0, 0, 2}}; // P4
    printf("Allocated matrix:(It has) \nAllocated instance of resources A,B,C to 5(p1 to p5) processors:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
            printf("%d ", alloc[i][j]);
        printf("\n");
    }
    printf("Max matrix:(it required) \nMaximum required instance of resources to processor to complete execution\n");
    int max[5][3] = {{7, 5, 3},  // P0 // MAX Matrix
                     {3, 2, 2},  // P1
                     {9, 0, 2},  // P2
                     {2, 2, 2},  // P3
                     {4, 3, 3}}; // P4

    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
            printf("%d ", max[i][j]);
        printf("\n");
    }
    // total instance 10 5 7 subtract allocated resources 7 2 5 remaining are 3 3 2
    int avail[3] = {3, 3, 2}; // Available Resources
    int f[n], ans[n], ind = 0;
    for (k = 0; k < n; k++)
    {
        f[k] = 0;
    }
    int need[n][m];
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }

printf("Need Matrix:(it want to reach max requirement) \nAllocated matrix - Max matrix\nInstance of resources it want to complete requirement to execute \n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
            printf("%d ", need[i][j]);
        printf("\n");
    }

    printf("\nAvaiable resources:");
    for (int i = 0; i < 3; i++)
    {
        printf(" %d", avail[i]);
    }
    printf("\n");
    int y = 0;
    for (k = 0; k < 5; k++)
    {
        for (i = 0; i < n; i++)
        {
            if (f[i] == 0)
            {

                int flag = 0;
                for (j = 0; j < m; j++)
                {
                    if (need[i][j] > avail[j])
                    {
                        printf("\nresources are not avaible for P%d", i);
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0)
                {
                    printf("\nresources are avaible for P%d", i);
                    ans[ind++] = i;
                    printf("\nprocess P%d is finish", i);
                    printf("\nAvailable resource after P%d complete:", i);
                    for (y = 0; y < m; y++)

                    {
                        avail[y] += alloc[i][y];
                        printf(" %d ", avail[y]);
                    }
                    f[i] = 1;
                    printf("\n");
                    // printf("\nprocess P%d is finish\n", i);
                }
            }
        }
    }

    int flag = 1;

    for (int i = 0; i < n; i++)
    {
        if (f[i] == 0)
        {
            flag = 0;
            printf("The following system is not safe");
            break;
        }
    }

    if (flag == 1)
    {
        printf("\nFollowing is the SAFE Sequence\n");
        for (i = 0; i < n - 1; i++)
            printf(" P%d ->", ans[i]);
        printf(" P%d", ans[n - 1]);
    }

    return (0);
}
