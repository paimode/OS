//15.FIFO page fault
//16.LRU
//17.optimal
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#define MAX_PAGES 100
#define MAX_FRAMES 10
int FIFO(int pages[], int n, int frames)
{
    int pageFaults = 0;
    int frame[MAX_FRAMES];
    int index = 0;
    memset(frame, -1, sizeof(frame));
    for (int i = 0; i < n; i++)
    {
        bool found = false;
        for (int j = 0; j < frames; j++)
        {
            if (frame[j] == pages[i])
            {
                found = true;
                break;
            }
        }

        if (!found)
        {
            frame[index] = pages[i];
            index = (index + 1) % frames; // Circular increment
            pageFaults++;
        }
    }
    return pageFaults;
}
int LRU(int pages[], int n, int frames)
{
    int pageFaults = 0;
    int frame[MAX_FRAMES];
    int lastUsed[MAX_FRAMES];
    memset(frame, -1, sizeof(frame));
    memset(lastUsed, -1, sizeof(lastUsed));
    for (int i = 0; i < n; i++)
    {
        bool found = false;
        for (int j = 0; j < frames; j++)
        {
            if (frame[j] == pages[i])
            {
                found = true;
                lastUsed[j] = i; // Update last used time
                break;
            }
        }
        if (!found)
        {
            int lruIndex = 0;
            for (int j = 1; j < frames; j++)
            {
                if (lastUsed[j] < lastUsed[lruIndex])
                {
                    lruIndex = j; // Find the least recently used
                }
            }
            frame[lruIndex] = pages[i];
            lastUsed[lruIndex] = i; // Update last used time
            pageFaults++;
        }
    }
    return pageFaults;
}
int Optimal(int pages[], int n, int frames)
{
    int pageFaults = 0;
    int frame[MAX_FRAMES];
    memset(frame, -1, sizeof(frame));

    for (int i = 0; i < n; i++)
    {
        bool found = false;

        for (int j = 0; j < frames; j++)
        {
            if (frame[j] == pages[i])
            {
                found = true;
                break;
            }
        }

        if (!found)
        {
            int optimalIndex = -1;
            int farthest = -1;

            for (int j = 0; j < frames; j++)
            {
                int k;
                for (k = i + 1; k < n; k++)
                {
                    if (frame[j] == pages[k])
                    {
                        if (k > farthest)
                        {
                            farthest = k;
                            optimalIndex = j; // Replace this page
                        }
                        break;
                    }
                }
                if (k == n)
                {
                    optimalIndex = j; // If page is not found in future
                    break;
                }
            }
            frame[optimalIndex] = pages[i];
            pageFaults++;
        }
    }
    return pageFaults;
}
int main()
{
    char referenceString[MAX_PAGES];
    int frames = 3; // Number of page frames
    int pages[MAX_PAGES];
    int n = 0;
    printf("Enter the page reference string (space-separated, end with -1): ");
    while (true)
    {
        char temp[10];
        scanf("%s", temp);
        if (strcmp(temp, "-1") == 0)
        {
            break;
        }
        pages[n++] = temp[0] - 'A'; // Convert character to integer (A=0, B=1, ...)
    }

    int fifoPageFaults = FIFO(pages, n, frames);
    int lruPageFaults = LRU(pages, n, frames);
    int optimalPageFaults = Optimal(pages, n, frames);

    printf("Page faults for FIFO: %d\n", fifoPageFaults);
    printf("Page faults for LRU: %d\n", lruPageFaults);
    printf("Page faults for Optimal: %d\n", optimalPageFaults);

    return 0;
}
