//9.fcfs
//10.sjf_nonpre_pre
//11.pri_nonpre_pre
#include <stdio.h>
#include <stdbool.h>

typedef struct
{
    int pid; // Process ID
    int burst_time;
    int arrival_time;
    int priority;       // For priority scheduling
    int remaining_time; // For Preemptive scheduling
    int finish_time;
    int turnaround_time;
    int waiting_time;
} Process;

void calculate_times(Process p[], int n)
{
    for (int i = 0; i < n; i++)
    {
        p[i].turnaround_time = p[i].finish_time - p[i].arrival_time;
        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;
    }
}

void fcfs(Process p[], int n)
{
    printf("\nFirst Come First Serve (FCFS):\n");
    printf("Scheduling Sequence: ");
    p[0].finish_time = p[0].arrival_time + p[0].burst_time;
    printf("P%d", p[0].pid);
    for (int i = 1; i < n; i++)
    {
        if (p[i].arrival_time > p[i - 1].finish_time)
        {
            p[i].finish_time = p[i].arrival_time + p[i].burst_time;
        }
        else
        {
            p[i].finish_time = p[i - 1].finish_time + p[i].burst_time;
        }
        printf(" -> P%d", p[i].pid);
    }
    printf("\n");
    calculate_times(p, n);
}

void sjf_non_preemptive(Process p[], int n)
{
    printf("\nShortest Job First (Non-Preemptive):\n");
    printf("Scheduling Sequence: ");
    int completed = 0, time = 0, min_index;
    bool finished[n];
    for (int i = 0; i < n; i++)
        finished[i] = false;

    while (completed != n)
    {
        min_index = -1;
        for (int i = 0; i < n; i++)
        {
            if (!finished[i] && p[i].arrival_time <= time)
            {
                if (min_index == -1 || p[i].burst_time < p[min_index].burst_time)
                {
                    min_index = i;
                }
            }
        }
        if (min_index != -1)
        {
            time += p[min_index].burst_time;
            p[min_index].finish_time = time;
            finished[min_index] = true;
            printf("P%d ", p[min_index].pid);
            if (completed != n - 1)
                printf("-> ");
            completed++;
        }
        else
        {
            time++;
        }
    }
    printf("\n");
    calculate_times(p, n);
}

void sjf_preemptive(Process p[], int n)
{
    printf("\nShortest Job First (Preemptive):\n");
    printf("Scheduling Sequence: ");
    int completed = 0, time = 0, min_index;
    bool finished[n];
    for (int i = 0; i < n; i++)
    {
        p[i].remaining_time = p[i].burst_time;
        finished[i] = false;
    }

    while (completed != n)
    {
        min_index = -1;
        for (int i = 0; i < n; i++)
        {
            if (!finished[i] && p[i].arrival_time <= time && p[i].remaining_time > 0)
            {
                if (min_index == -1 || p[i].remaining_time < p[min_index].remaining_time)
                {
                    min_index = i;
                }
            }
        }
        if (min_index != -1)
        {
            printf("P%d ", p[min_index].pid);
            p[min_index].remaining_time--;
            time++;
            if (p[min_index].remaining_time == 0)
            {
                p[min_index].finish_time = time;
                finished[min_index] = true;
                completed++;
            }
        }
        else
        {
            time++;
        }
    }
    printf("\n");
    calculate_times(p, n);
}

void priority_non_preemptive(Process p[], int n)
{
    printf("\nPriority Scheduling (Non-Preemptive):\n");
    printf("Scheduling Sequence: ");
    int completed = 0, time = 0, min_index;
    bool finished[n];
    for (int i = 0; i < n; i++)
        finished[i] = false;

    while (completed != n)
    {
        min_index = -1;
        for (int i = 0; i < n; i++)
        {
            if (!finished[i] && p[i].arrival_time <= time)
            {
                if (min_index == -1 || p[i].priority < p[min_index].priority)
                {
                    min_index = i;
                }
            }
        }
        if (min_index != -1)
        {
            time += p[min_index].burst_time;
            p[min_index].finish_time = time;
            finished[min_index] = true;
            printf("P%d ", p[min_index].pid);
            if (completed != n - 1)
                printf("-> ");
            completed++;
        }
        else
        {
            time++;
        }
    }
    printf("\n");
    calculate_times(p, n);
}

void round_robin(Process p[], int n, int quantum)
{
    printf("\nRound Robin:\n");
    printf("Scheduling Sequence: ");
    int time = 0, completed = 0;
    int remaining_time[n];
    for (int i = 0; i < n; i++)
        remaining_time[i] = p[i].burst_time;

    while (completed != n)
    {
        for (int i = 0; i < n; i++)
        {
            if (remaining_time[i] > 0 && p[i].arrival_time <= time)
            {
                printf("P%d ", p[i].pid);
                if (remaining_time[i] > quantum)
                {
                    time += quantum;
                    remaining_time[i] -= quantum;
                }
                else
                {
                    time += remaining_time[i];
                    remaining_time[i] = 0;
                    p[i].finish_time = time;
                    completed++;
                }
                if (completed != n)
                    printf("-> ");
            }
        }
    }
    printf("\n");
    calculate_times(p, n);
}
void priority_preemptive(Process p[], int n)
{
    printf("\nPriority Scheduling (Preemptive):\n");
    printf("Scheduling Sequence: ");
    int completed = 0, time = 0, min_index;
    bool finished[n];
    for (int i = 0; i < n; i++)
    {
        p[i].remaining_time = p[i].burst_time;
        finished[i] = false;
    }

    while (completed != n)
    {
        min_index = -1;
        // Find the process with the highest priority that can run at this time
        for (int i = 0; i < n; i++)
        {
            if (!finished[i] && p[i].arrival_time <= time && p[i].remaining_time > 0)
            {
                if (min_index == -1 || p[i].priority < p[min_index].priority)
                {
                    min_index = i;
                }
            }
        }

        if (min_index != -1)
        {
            // Process execution
            printf("P%d ", p[min_index].pid);
            p[min_index].remaining_time--;
            time++;

            // If the process is finished
            if (p[min_index].remaining_time == 0)
            {
                p[min_index].finish_time = time;
                finished[min_index] = true;
                completed++;
            }
        }
        else
        {
            time++; // If no process is available, increase time
        }
    }
    printf("\n");
    calculate_times(p, n);
}

void print_times(Process p[], int n)
{
    printf("PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t%d\t%d\t%d\t%d\t\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].finish_time, p[i].turnaround_time, p[i].waiting_time);
    }
}

int main()
{
    int n = 4;
    Process p[] = {
        {1, 6, 0, 1, 0, 0, 0, 0},
        {2, 8, 1, 3, 0, 0, 0, 0},
        {3, 7, 2, 2, 0, 0, 0, 0},
        {4, 3, 3, 4, 0, 0, 0, 0},
    };

    fcfs(p, n);
    print_times(p, n);

    sjf_non_preemptive(p, n);
    print_times(p, n);

    sjf_preemptive(p, n);
    print_times(p, n);

    priority_non_preemptive(p, n);
    print_times(p, n);

    priority_preemptive(p, n);
    print_times(p, n);

    round_robin(p, n, 2); // Quantum of 2
    print_times(p, n);

    return 0;
}
