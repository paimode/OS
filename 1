1) Print Sum of Digits of a given number using command line argument
CODE:
#!/bin/bash
if [ $# -eq 0 ]; then
  echo "No arguments provided"
  exit 1
fi
number=$1
sum=0
while [ $number -gt 0 ]
do
  digit=`expr $number % 10`
  sum=`expr $sum + $digit`
  number=`expr $number / 10`
done
echo "Sum of digits: $sum"

OUPUT:
ruapli@ruapli-VirtualBox:~$ bash os_lab.sh 1234
Sum of digits: 10

2) Write a shell script using function for following:1) average of given numbers 2) Max digit from given number and 3) min digit from given number
CODE:
#!/bin/bash
average() {
  sum=0
  count=$#
  for num in "$@"
   do
    sum=`expr $sum + $num`
  done
  avg=`expr $sum / $count`
  echo "Average: $avg"
}
max_digit() {
  number=$1
  max=0
  while [ $number -gt 0 ]
do
    digit=`expr $number % 10`
    if [ $digit -gt $max ]
    then
      max=$digit
    fi
    number=`expr $number / 10`
  done
  echo "Max digit: $max"
}
min_digit() {
  number=$1
  min=9
  while [ $number -gt 0 ]
do
    digit=`expr $number % 10`
    if [ $digit -lt $min ]
then
      min=$digit
    fi
    number=`expr $number / 10`
  done
  echo "Min digit: $min"
}
use() {
  echo "Use:"
  echo "$0 average <num1> <num2> ..."
  echo "$0 max_digit <number>"
  echo "$0 min_digit <number>"
}
if [ $# -lt 2 ]
then
  use
  exit 1
fi
operation=$1
shift
case $operation in
  average)
    if [ $# -lt 1 ]
    then
      echo "Error: At least one number is required for average calculation."
      exit 1s
    fi
    average "$@"
    ;;
  max_digit)
    if [ $# -ne 1 ]
    then
      echo "Error: Exactly one number is required for max digit calculation."
      exit 1
    fi
    max_digit "$1"
    ;;
  min_digit)
    if [ $# -ne 1 ]
    then
      echo "Error: Exactly one number is required for min digit calculation."
      exit 1
    fi
    min_digit "$1"
    ;;
  *) 
    echo "Error: Unknown operation '$operation'."
    use
    exit 1
    ;;
esac

OUTPUT:
ruapli@ruapli-VirtualBox:~$ bash os.sh average 2 3 4 5 6
Average: 4
ruapli@ruapli-VirtualBox:~$ bash os.sh max_digit 1234
Max digit: 4
ruapli@ruapli-VirtualBox:~$ bash os.sh min_digit 1234
Min digit: 1

3) Perform sorting on given array elements
CODE:
bubble_sort() {
  array=("$@")
  n=${#array[@]}
  for ((i = 0; i < n; i++))
 do
    for ((j = 0; j < n - i - 1; j++))
do
      if [ "${array[j]}" -gt "${array[j+1]}" ]
then
        temp=${array[j]}
        array[j]=${array[j+1]}
        array[j+1]=$temp
      fi
    done
  done
  echo "${array[@]}"
}
if [ $# -eq 0 ]
then
  echo "No arguments provided"
  exit 1
fi

sorted_array=($(bubble_sort "$@"))
echo "Sorted array: ${sorted_array[@]}"
OUTPUT:
ruapli@ruapli-VirtualBox:~$ bash os_lab1.sh 2 5 4 5 2
Sorted array: 2 2 4 5 5

4) Program to find factorial of a given number with and without recursion
CODE:
#!/bin/bash
factorial_recursive() {
  if [ $1 -le 1 ]
  then
    echo 1
  else
    prev=$(factorial_recursive $(( $1 - 1 )))
    echo $(( $1 * prev ))
  fi
}
factorial_without_recursion() {
fact=$1
f=1
  while [ $fact -gt 0 ]
  do
    f=`expr $f \* $fact`
    fact=`expr $fact - 1`
  done
  return $f
}
if [ $# -eq 0 ]
then
  echo "No arguments provided"
  exit 1
fi
result=$(factorial_recursive $1)
echo "Factorial (recursive): $result"
factorial_without_recursion $1
echo "Factorial without_recursion: $?"

OUTPUT:
ruapli@ruapli-VirtualBox:~$ bash os_lab4.sh 5
Factorial (recursive): 120
Factorial without_recursion: 120

5)Program to check file type and permission for a given file
CODE:
#!/bin/bash
if [ $# -eq 0 ]; then
  echo "No arguments provided"
  exit 1
fi
file=$1
if [ -e "$file" ]           # -e != -d
then
  echo "File type:"
  ch=`ls -l $file | cut -c 1`
 # file "$file"
 # echo "Permissions:"
 # ls -l "$file" | awk '{print $1}'
 case "$ch" in
    -) echo "ordinary file" ;;
    b) echo "block special file" ;;
    c) echo "character special file" ;;
    d) echo "directory" ;;
    l) echo "symbolic link" ;;
    s) echo "socket file" ;;
    p) echo "FIFO (named pipe)" ;;
    *) echo "unknown type" ;;
  esac
 echo "Permissions:"
 ls -l "$file" | awk '{print $1}'
else
  echo "File does not exist"
fi

OUTPUT:
ruapli@ruapli-VirtualBox:~$ bash os_lab3.sh bi.txt
File type:
ordinary file
Permissions:
-rw-rw-r--

6) Check entered string is palindrome or not?
CODE:
#!/bin/bash
if [ $# -eq 0 ]; then
  echo "No arguments provided"
  exit 1
fi
str=$1
len=${#str}
is_palindrome=1
while [ $i -le $len ]
do
ch1=`echo $str | cut -c $i`
ch2=`echo $str | cut -c $len`
 if [ $ch1 != $ch2 ]
 then
    is_palindrome=0
    break
  fi
i=`expr $i + 1`
len=`expr $len - 1`
done
if [ $is_palindrome -eq 1 ]; then
  echo "The string '$str' is a palindrome"
else
  echo "The string '$str' is not a palindrome"
fi


OUTPUT:
ruapli@ruapli-VirtualBox:~$ bash os_lab2.sh heleh
The string 'heleh' is a palindrome
