//6.RW-Sthread
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
sem_t wtr;
sem_t mutex;
int rc = 0;
int x = 0;
void *reader(void *arg)
{
    int id = *((int *)arg);
    sem_wait(&mutex);
    rc++;
    if (rc == 1)
    {
        sem_wait(&wtr); // we  block the writer semaphore
    }
    sem_post(&mutex);
    printf("reader %d is reading \n", id);
    sem_wait(&mutex);
    rc--;
    if (rc == 0)
    {
        sem_post(&wtr); // here we release semaphore write
    }
    sem_post(&mutex); // reader leave
    return NULL;
}
void *writer()
{
    sem_wait(&mutex);
    sem_wait(&wtr);
    x++;
    printf("the data write %d \n", x);
    sem_post(&mutex);
    sem_post(&wtr);
    return NULL;
}
int main()
{
    sem_init(&wtr, 0, 1);
  sem_init(&mutex, 0, 1);
    int r_id[10], w_id[2];
    pthread_t reader_t[10], writer_t[2];
    // Create producer and consumer threads
    for (int i = 0; i < 10; i++)
    {
        r_id[i] = i;
       pthread_create(&reader_t[i], NULL, reader, &r_id[i]);
    }
    for (int i = 0; i < 2; i++)
    {
        w_id[i] = i;
        pthread_create(&writer_t[i], NULL, writer, &w_id[i]);
    }
    for (int i = 0; i < 10; i++)
    {
        pthread_join(reader_t[i], NULL);
    }
    for (int i = 0; i < 2; i++)
    {
        pthread_join(writer_t[i], NULL);
    }
    sem_destroy(&wtr);
    sem_destroy(&mutex);
    return 0;
}
